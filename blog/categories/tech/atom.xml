<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Bin3 Says]]></title>
  <link href="http://bin3.github.com/blog/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://bin3.github.com/blog/"/>
  <updated>2013-07-07T17:33:44+08:00</updated>
  <id>http://bin3.github.com/blog/</id>
  <author>
    <name><![CDATA[bin3]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一种技术一句话One sentence for one technique]]></title>
    <link href="http://bin3.github.com/blog/blog/2013/07/07/one-sentence-for-one-technique/"/>
    <updated>2013-07-07T08:07:00+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2013/07/07/one-sentence-for-one-technique</id>
    <content type="html"><![CDATA[<h2>Why?</h2>

<p>IT技术日新月异体系庞杂，作为有追求的从业者欲紧随潮流、不被拍死海滩乃至驻立潮头，需要在不断夯实自身专长、专注深度的同时，也兼顾广度，保持开阔的视野和敏锐的嗅觉，对技术的宏观层面亦有所把握，这反过来也能采百家之长，精深自己的专长。
本文采用广度优先遍历各种技术，一种技术用一句话概括其精髓，旨在写一篇最广最浅的技术文。基于本人目前的认识，难免各种疏漏，之后慢慢更新改良。</p>

<h2>Language</h2>

<h4>C</h4>

<p>面向过程，久经考验，目前在系统级编程领域仍不可或缺。</p>

<h4>C++</h4>

<p>支持面向对象、泛型编程的C语言的超集，目标是在不损失C的高性能的基础上极大提升开发效率，过于求全历史包袱重因而最复杂。</p>

<h4>Java</h4>

<p>参考了C++，纯粹的面向对象语言，有垃圾回收机制做自动内存管理，最流行的编程语言，社区活跃，库众多。</p>

<h4>Python</h4>

<p>注重简洁性的动态语言，当前最流行。</p>

<h4>Ruby</h4>

<p>注重灵活性的动态语言，因Ruby on rails框架而火。</p>

<h4>PHP</h4>

<p>占比最大的网页后端开发语言。</p>

<h4>Javascript</h4>

<p>绝对统治的网页前端开发语言。</p>

<h4>HTML</h4>

<p>网页文档的标记语言。</p>

<h4>HTML5</h4>

<p>下一代HTML，新增了许多强大特性。</p>

<h4>CSS</h4>

<p>控制HTML页面样式。</p>

<h4>Go</h4>

<p>Google开发，专注分布式系统开发。</p>

<h4>Scala</h4>

<p>JVM上的函数式编程语言，能方便地使用Java库。</p>

<h4>Erlang</h4>

<p>古老的函数式编程语言，对分布式系统开发支持很好。</p>

<h2>Library or Framework</h2>

<h4>node.js</h4>

<p>构建于Chrominume V8之上，JavaScript的后端运行框架。</p>

<h4>Ruby on rails, ROR</h4>

<p>最流行的Ruby网页开发框架，Ruby因它而火。</p>

<h2>Big Data</h2>

<h3>Google系</h3>

<h4>MapReduce</h4>

<p>Google提出的并行计算模型，基本操作Map和Reduce。</p>

<h4>GFS</h4>

<p>分布式文件系统，主要用于存取大文件，多追加操作。</p>

<h4>BigTable</h4>

<p>大规模列存储数据库，构建于GFS之上。</p>

<h4>Chunby</h4>

<p>分布式协调系统。</p>

<h4>Omega</h4>

<p>集群管理系统。</p>

<h3>Hadoop系</h3>

<h4>Hadoop</h4>

<p>Google MapReduce模型的开源实现，事实标准，延时较大，主要用于离线数据分析。</p>

<h4>Yarn</h4>

<p>Hadoop二代，专注集群管理，可支持MapReduce等多种计算框架。</p>

<h4>HDFS</h4>

<p>Google GFS的开源实现。</p>

<h4>Hbase</h4>

<p>Google BigTable的开源实现。</p>

<h4>ZooKeeper</h4>

<p>Google Chunby的开源实现。</p>

<h4>Spark</h4>

<p>全内存的MapReduce框架，速度提升几十倍。</p>

<h4>Mesos</h4>

<p>集群管理系统。</p>

<h4>Storm</h4>

<p>流式计算框架。</p>

<h3>Graph Computing</h3>

<h4>Pregel</h4>

<p>Google于2010年提出的图计算框架，基于BSP模型，以结点为中心，每轮迭代中结点利用它接收的消息进行计算，并可向任意结点发送消息，本轮发送的消息在下一轮才能收到。</p>

<h4>Giraph</h4>

<p>Pregel开源实现，Facebook、Twitter等主导开发。</p>

<h4>Graphlab</h4>

<p>CMU提出并实现的图计算框架，GAS模型，Gather、Apply和Scatter三个主操作。</p>

<h2>Database</h2>

<h4>MySQL</h4>

<p>使用最多的SQL数据库，开源。</p>

<h3>NoSQL</h3>

<h4>MongoDB</h4>

<p>持久化存储，自动分片和复制集管理，NoSQL明星。</p>

<h4>Redis</h4>

<p>最快的内存key-value数据库，适用于做缓存。</p>

<h4>LevelDB</h4>

<p>持久化key-value数据库，适用于做分布式存储系统的引擎，代码约5千行，适合阅读。</p>

<h4>Neo4j</h4>

<p>图数据库。</p>
]]></content>
  </entry>
  
</feed>
