<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bin3 Says]]></title>
  <link href="http://bin3.github.com/blog/atom.xml" rel="self"/>
  <link href="http://bin3.github.com/blog/"/>
  <updated>2013-01-15T08:53:48+08:00</updated>
  <id>http://bin3.github.com/blog/</id>
  <author>
    <name><![CDATA[bin3]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Markdown Cheat Sheet]]></title>
    <link href="http://bin3.github.com/blog/blog/2013/01/15/markdown-cheat-sheet/"/>
    <updated>2013-01-15T00:09:00+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2013/01/15/markdown-cheat-sheet</id>
    <content type="html"><![CDATA[<h1>TODO</h1>

<p>From <a href="http://warpedvisions.org/projects/markdown-cheat-sheet/">http://warpedvisions.org/projects/markdown-cheat-sheet/</a></p>

<h1>Header 1</h1>

<h2>Header 2</h2>

<h3>Header 3 ###             (Hashes on right are optional)</h3>

<h4>Header 4</h4>

<h5>Header 5</h5>

<h2>Markdown plus h2 with a custom ID ##         {#id-goes-here}</h2>

<p><a href="#id-goes-here">Link back to H2</a></p>

<p>This is a paragraph, which is text surrounded by whitespace. Paragraphs can be on one
line (or many), and can drone on for hours.</p>

<p>Here is a Markdown link to <a href="http://warpedvisions.org">Warped</a>, and a literal <a href="http://link.com/">http://link.com/</a>.
Now some SimpleLinks, like one to &#91;google&#93; (automagically links to are-you-
feeling-lucky), a &#91;wiki: test&#93; link to a Wikipedia page, and a link to
&#91;foldoc: CPU&#93;s at foldoc.</p>

<p>Now some inline markup like <em>italics</em>,  <strong>bold</strong>, and <code>code()</code>. Note that underscores in
words are ignored in Markdown Extra.</p>

<p><img src="http://bin3.github.com/blog/images/email.png" title="Title is optional" alt="picture alt" /></p>

<blockquote><p>Blockquotes are like quoted text in email replies</p>

<blockquote><p>And, they can be nested</p></blockquote></blockquote>

<ul>
<li>Bullet lists are easy too</li>
<li>Another one</li>
<li><p>Another one</p></li>
<li><p>A numbered list</p></li>
<li>Which is numbered</li>
<li>With periods and a space</li>
</ul>


<p>And now some code:</p>

<pre><code>// Code is just text indented a bit
which(is_easy) to_remember();
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 
</span><span class='line'>// Markdown extra adds un-indented code blocks too
</span><span class='line'> 
</span><span class='line'>if (this_is_more_code == true && !indented) {
</span><span class='line'>    // tild wrapped code blocks, also not indented
</span><span class='line'>}
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>


<p>Text with<br/>
two trailing spaces<br/>
(on the right)<br/>
can be used<br/>
for things like poems</p>

<h3>Horizontal rules</h3>

<hr />

<hr />

<hr />

<p>&lt;div class=&#8221;custom-class&#8221; markdown=&#8221;1&#8221;&gt;
This is a div wrapping some Markdown plus.  Without the DIV attribute, it ignores the
block.
&lt;/div&gt;</p>

<h2>Markdown plus tables</h2>

<table>
<thead>
<tr>
<th></th>
<th> Header </th>
<th> Header </th>
<th align="right"> Right  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>  Cell  </td>
<td>  Cell  </td>
<td align="right">   $10  |</td>
</tr>
<tr>
<td></td>
<td>  Cell  </td>
<td>  Cell  </td>
<td align="right">   $20  |</td>
</tr>
</tbody>
</table>


<ul>
<li>Outer pipes on tables are optional</li>
<li>Colon used for alignment (right versus left)</li>
</ul>


<h2>Markdown plus definition lists</h2>

<p>Bottled water
: $ 1.25
: $ 1.55 (Large)</p>

<p>Milk
Pop
: $ 1.75</p>

<ul>
<li>Multiple definitions and terms are possible</li>
<li>Definitions can include multiple paragraphs too</li>
</ul>


<p>*[ABBR]: Markdown plus abbreviations (produces an &lt;abbr&gt; tag)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What have I done and leaned in 2012]]></title>
    <link href="http://bin3.github.com/blog/blog/2013/01/14/what-have-i-done-and-leaned-in-2012/"/>
    <updated>2013-01-14T23:10:00+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2013/01/14/what-have-i-done-and-leaned-in-2012</id>
    <content type="html"><![CDATA[<p>I have worked for half and one years. The past year means much more be me as a freshman.</p>

<p>During the past year, I have written 3 application projects, each has about 5000 lines of code(LOC) and an AC-Automation library. Now I know how to write a project with 10k LOC and how to design the interfaces of each class.</p>

<p>I leaned to use some NoSQL databases such as <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://fallabs.com/kyotocabinet/">Kyoto Cabinet</a> and <a href="http://code.google.com/p/leveldb/">LevelDB</a>. I also read some code of those projects. I began to read open source code, but I haven&#8217;t finished a whole project. Anyway, it&#8217;s a good start and I have got some sense of how a big system is constructed. I deeply realize that reading code is really a nessarry and efficient way to improve my coding skills.</p>

<p>I began to use <a href="https://github.com/">Github</a> to manage my code.
<img src="http://bin3.github.com/blog/images/bin3-github-contrib-2012.png" title="bin3 github contributions 2012" alt="picture alt" /></p>

<p>I used <a href="http://www.wikispaces.com/">Wikispaces</a> and <a href="http://www.xmind.net/">XMind</a> to manage my knowledge. I have created about 100 wiki pages and 40 mind maps.</p>

<p>I began to use MacBook Air. It gives me a very nice experience and effectively improves my production.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Every Language Has a Package Manager Except C++]]></title>
    <link href="http://bin3.github.com/blog/blog/2013/01/13/every-language-has-a-package-manager-except-c-plus-plus/"/>
    <updated>2013-01-13T23:48:00+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2013/01/13/every-language-has-a-package-manager-except-c-plus-plus</id>
    <content type="html"><![CDATA[<p>Ruby has Gem.</p>

<p>Python has easy_install and pip.</p>

<p>Java has ivy and maven.</p>

<p>Every language has a package manager except C++.</p>

<p>I really have the feeling of standing on the shoudlders of giants when using Maven. But when programming with C++, I feel that I have fallen down to the ground. There are too much tedious work you have to do even for a small task. There are too few standard libraries easy to use. Yes, there exists a excellent library named Boost, which is a very powerfull complement of STL. However, in China, the most company in my knowledge even don&#8217;t use STL, no matter to say Boost. Every department maybe has its own basic library possibly called base or common. Those libraries just re-implement STL and add some thread-safe features perhaps. But they also may bring some bugs and cannot supply enough utilities as STL. They usually have little document too. The situation maybe better in other places, but the lack of open libraries and automated tools for C++ is absolutely a fact.</p>

<p>C++, can you be more friendly to a newbie?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post with Octopress]]></title>
    <link href="http://bin3.github.com/blog/blog/2013/01/13/first-post-with-octopress/"/>
    <updated>2013-01-13T16:10:00+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2013/01/13/first-post-with-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> is very nice. I like it.</p>

<p>Here are some beatifull code snippets.</p>

<figure class='code'><figcaption><span>Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Python</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="s">&quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>C++</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello World&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>PHP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="s2">&quot;Hello World&quot;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>Hello World
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[缓存友好地编程]]></title>
    <link href="http://bin3.github.com/blog/blog/2012/09/17/e7bc93e5ad98e58f8be5a5bde59cb0e7bc96e7a88b/"/>
    <updated>2012-09-17T10:53:43+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2012/09/17/e7bc93e5ad98e58f8be5a5bde59cb0e7bc96e7a88b</id>
    <content type="html"><![CDATA[<p>缓存友好地编程（cache friendly programming），以前形成的概念完全来源于一道经典的面试题：比较两个二重循环的性能 <a href="http://www.cnblogs.com/yanlingyin/archive/2012/02/15/thinkingincache.html">http://www.cnblogs.com/yanlingyin/archive/2012/02/15/thinkingincache.html</a>。</p>

<p>最近在对编写的AC自动机库做性能测试时，还亲身感受了一把缓存友好带来的差别。当时的场景是这样的：</p>

<p>AC自动机底层可使用不同的Trie实现。对于双数组Trie、Ternary Trie，每次向AC自动机插入pattern时，并不直接插入Trie树，而是等所有pattern都插入完毕后，再统一处理构建Trie树并Compile建立AC自动机，这样的方案更简单高效。而对于普通的基于二叉树的Trie，在算法上则无此限制（简称BiTrie）。但当我把基于BiTrie的AC自动机改为向AC自动机插pattern时也直接插入BiTrie中的方案时，pattern数100万时，Compile速度下降为原来的1/5，pattern数1000万时，Compile速度更降为1/80，而其他环节性能不变。</p>

<p>仅仅只是几句代码的移动却导致这么大的性能差距，远大于某些算法层面的差别。刚开始我困惑了很久，用gprofile分析也无果。最后面想到可能是缓存的原因：</p>

<p>AC自动机的Insert和Compile，都会大量访问Trie的结点，把二者集中在一块跑能更好地利用对结点的缓存。</p>

<p>不过，这个结论目前我不知道怎么验证。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse调优]]></title>
    <link href="http://bin3.github.com/blog/blog/2012/08/01/eclipsee8b083e4bc98/"/>
    <updated>2012-08-01T16:54:25+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2012/08/01/eclipsee8b083e4bc98</id>
    <content type="html"><![CDATA[<p>Eclipse是个很强大的IDE，丰富的插件支持多种语言，有一统IDE江湖之势。作为一名一直没能用惯VIM做项目开发的小白，用Eclipse不亦乐乎。</p>

<p>不过Eclipse项目文件一多速度就不敢恭维了，有时简直无法忍受，习惯性地按Ctrl+S都要卡半天。于是深入研究了一下Eclipse运行速度的优化，总结如下：</p>

<h1>1.JVM调优</h1>

<p>Eclipse是java开发的，所以它运行时的性能与底层的JVM不无相关。可以与eclipse主程序同目录的eclipse.ini配置文件来设置堆大小、垃圾回收等参数。</p>

<p>一个参考配置：
<a href="http://www.ubik-ingenierie.com/ubikwiki/index.php?title=Eclipse_Tuning">http://www.ubik-ingenierie.com/ubikwiki/index.php?title=Eclipse_Tuning</a></p>

<p>这一块跟调优一般的java程序无异，这块水不浅。通用java调优的权威参考：
<a href="http://java.sun.com/performance/reference/whitepapers/tuning.html">http://java.sun.com/performance/reference/whitepapers/tuning.html</a></p>

<p>专门调优垃圾回收的权威参考：
<a href="http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html">http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html</a></p>

<h1>2. Eclipse设置</h1>

<h2> Refresh workspace</h2>

<p>Eclipse会自动检查更新项目的文件，如果项目中大量临时文件将会使更新巨慢无比。可通过设置Poject的
<em>Properties->Resource -> Resource Filters</em>
过滤指定的文件或目录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《那些李子》序]]></title>
    <link href="http://bin3.github.com/blog/blog/2012/06/30/e3808ae982a3e4ba9be69d8ee5ad90e3808be5ba8f/"/>
    <updated>2012-06-30T05:32:09+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2012/06/30/e3808ae982a3e4ba9be69d8ee5ad90e3808be5ba8f</id>
    <content type="html"><![CDATA[<p>现在是2012，距我们的会同一中初187班毕业十年整。在2009年距我们开始相聚在187班也是十年的时候，我们搞了一个很感动的聚会，萌发了出这本书的想法，以纪念我们共同的187。今天，这本书历经同我们的187一样长的三年时间的成长，终于出版啦。</p>

<p>这是一部我们共同主演的编织着属于我们自己的青春记忆的电影。当从琐碎的现实中抽离，开始演绎那段封存在记忆中的时光，大家都纷纷感慨，那些被时间洪流裹卷而去的点点滴滴并没有分毫褪色，依然那么鲜活闪亮。在这部电影里，每个人也因为其他同学的演绎而变得更加生动。最终大家汹涌泛滥的回忆汇聚成了这部青春大片。</p>

<p>这本书的出版要感谢每位同学的关注和回忆，这本书饱满发酵的感情，源自大家一篇篇发自肺腑催人泪下的煽情文字。这本书的出版要特别感谢邓玉同学，从出书想法的提出到催稿、收稿整理、画大头照，一直到编辑、排版、出版的全过程，都离不开他的辛勤付出。他是我们这部青春大片的总导演，感谢邓玉。</p>

<p>同学们，在今天，抛开那些恼人的工作、烦乱的琐事吧，倒上一杯茶或咖啡，放空自己，我们一起，围观这部热烈的属于我们自己的青春大片。</p>

<p>老张</p>

<p>2012年6月末</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The top 3 regretful things I haven't done in college]]></title>
    <link href="http://bin3.github.com/blog/blog/2012/03/13/the-most-3-regretful-things-i-havent-done-in-college/"/>
    <updated>2012-03-13T09:55:26+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2012/03/13/the-most-3-regretful-things-i-havent-done-in-college</id>
    <content type="html"><![CDATA[<p>Those things are all about study. I have worked for 8 months after graduation. I only had an internship for about 2 months in a very small company before which was quite unlike a formal company. I can deeply realize what&#8217;s the feeling of doing a real job  until now.</p>

<p>People always say, Knowledge is always not enough when in need. Yes, that&#8217;s totally right. Now, when I am doing a job, when I have really dived into the society, I start to regret that something I haven&#8217;t learned well enough when in college. The most regretful things are listed below:</p>

<ol>
<li><p>Haven&#8217;t read enough technology and programming related books.</p></li>
<li><p>Haven&#8217;t entered open source activity, haven&#8217;t deeply read and learned any excellent open source projects. Reading master&#8217;s code is a real short-cut method for learning  programming.</p></li>
<li><p>Haven&#8217;t used Linux for developing. Linux is really efficient for developing and has so many useful tools, but I always have a bias in mind.</p></li>
</ol>


<p>Why I haven&#8217;t done?</p>

<ol>
<li><p>Bias in mind.</p></li>
<li><p>Fear of unknown.</p></li>
<li><p>No big vision, no big goals.</p></li>
</ol>


<p>Late better than never. Now I have deeply knew all those problems and most importantly I haven&#8217;t lost my dream. Come on, bin3, just fight.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写一个open source的string matching库？]]></title>
    <link href="http://bin3.github.com/blog/blog/2012/02/15/e58699e4b880e4b8aaopen-sourcee79a84string-matchinge5ba93efbc9f/"/>
    <updated>2012-02-15T23:41:39+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2012/02/15/e58699e4b880e4b8aaopen-sourcee79a84string-matchinge5ba93efbc9f</id>
    <content type="html"><![CDATA[<p>想找一个漂亮的AC自动机的C++实现，本来就少，更没找到达标的。在quora上看到有人问有没有全面的字符串匹配的库，没有人给出满意答案。看来目前至少没有很好的开源的字符串匹配库存在。缺口啊，我很有兴趣去开发一个。</p>

<p>许多算法自己以前实现过，但大都是应付具体场景，可扩展性太弱了。要设计得很通用也曾私下琢磨过，确非易事。通过做这个可以实际磨练一下孱弱的代码设计能力。另外入行也有些年头了，应该搞一个像样的开源项目装装门面。</p>

<p>好，今天写下这个想法，用课余时间一步步来做。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SB2FB]]></title>
    <link href="http://bin3.github.com/blog/blog/2012/02/12/sb2fb/"/>
    <updated>2012-02-12T09:56:51+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2012/02/12/sb2fb</id>
    <content type="html"><![CDATA[<p>有幸曾作为SCIR的FB团长</p>

<p>沉寂许久</p>

<p>终于从一个封闭狭窄的密室激活</p>

<p>嗅到一柱久违的鲜活的阳光</p>

<p>FB吧青年</p>

<p>去实现当年在FB团高喊的口号——</p>

<p>FB all over the world</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从SB奔向NB]]></title>
    <link href="http://bin3.github.com/blog/blog/2012/02/10/from-sb-to-nb/"/>
    <updated>2012-02-10T09:21:08+08:00</updated>
    <id>http://bin3.github.com/blog/blog/2012/02/10/from-sb-to-nb</id>
    <content type="html"><![CDATA[<p>长期不写blog是思想堕落的表现。</p>

<p>从今天起，从这里重新开始，坚持写blog。</p>

<p>奋斗吧青年，从SB奔向NB！</p>
]]></content>
  </entry>
  
</feed>
